// app/generate/page.tsx
"use client";

import { useState } from "react";

export default function GeneratePage() {
  const [prompt, setPrompt] = useState("");
  const [imageUrl, setImageUrl] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    setImageUrl(null);

    try {
      // 1) Call the backend to generate with DALL·E
      const res = await fetch("/api/dalle/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ prompt }),
      });
      const data = await res.json();
      if (!res.ok) {
        setError(data.error || `Error ${res.status}`);
        setLoading(false);
        return;
      }
      setImageUrl(data.imageUrl);

      // 2) Deduct 1 credit / Save to library
      await fetch("/api/images", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ imageUrl: data.imageUrl }),
      });
    } catch (err: any) {
      setError(err.message || "Network error");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6 max-w-lg mx-auto">
      <h1 className="text-2xl mb-4">Generate an Image</h1>
      <form onSubmit={handleSubmit} className="mb-6">
        <label className="block mb-2">
          <span className="text-sm">Prompt</span>
          <input
            type="text"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            className="mt-1 block w-full border rounded p-2"
            placeholder="Describe your image…"
            required
          />
        </label>
        <button
          type="submit"
          disabled={loading}
          className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
        >
          {loading ? "Generating…" : "Generate"}
        </button>
      </form>

      {error && <p className="text-red-500 mb-4">❌ {error}</p>}

      {imageUrl && (
        <div>
          <h2 className="text-xl mb-2">Result</h2>
          <img
            src={imageUrl}
            alt="Generated by DALL·E-3"
            className="rounded shadow mx-auto"
          />
        </div>
      )}
    </div>
  );
}
